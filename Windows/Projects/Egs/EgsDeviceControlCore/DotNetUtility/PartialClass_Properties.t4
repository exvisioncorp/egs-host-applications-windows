<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
namespace <#= namespaceName #>
{
    using System;
    using System.Windows.Forms;
    using System.ComponentModel;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;
    using Egs;
    using Egs.DotNetUtility;
    using Egs.PropertyTypes;

    <#= classDescription #>
    {
<#
foreach (var item in propertyElementsList)
{
#>
        [EditorBrowsable(EditorBrowsableState.Never)]
        <#= item.TypeName #> _<#= item.Name #>;
        <# if (string.IsNullOrEmpty(item.BaseAccessibility) == false) { #><#= item.BaseAccessibility #> <# } #>event EventHandler <#= item.Name #>Changed;
        protected <# if (item.BaseAccessibility == "internal") { #>internal <# } #>virtual void On<#= item.Name #>Changed(EventArgs e)
        {
            var t = <#= item.Name #>Changed; if (t != null) { t(this, e); }
            OnPropertyChanged("<#= item.Name #>");
        }
<# if (string.IsNullOrEmpty(item.AttributeDescription) == false) { #>
        <#= item.AttributeDescription #>
<# } #>
        <# if (string.IsNullOrEmpty(item.BaseAccessibility) == false) { #><#= item.BaseAccessibility #> <# } #><#= item.TypeName #> <#= item.Name #>
        {
            get { return _<#= item.Name #>; }
            <# if (string.IsNullOrEmpty(item.SetterAccessibility) == false) { #><#= item.SetterAccessibility #> <# } #>set
            {
<# if (item.SetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue) { #>
                if (value != _<#= item.Name #>)
                {
    <# } #>
                _<#= item.Name #> = value; On<#= item.Name #>Changed(EventArgs.Empty);
<# if (item.SetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue) { #>
                }
<# } #>
            }
        }

<#
}
#>
    }
}
<#+
private class PropertyInfoForT4Template
{
    public string AttributeDescription;
    public string BaseAccessibility;
    public string TypeName;
    public string Name;
    public string SetterAccessibility;
    public bool SetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue;
    public PropertyInfoForT4Template(string newAttributeDescription, string newBaseAccessibility, string newTypeName, string newName, string newSetterAccessibility, bool newSetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue)
    {
        AttributeDescription = newAttributeDescription;
        BaseAccessibility = newBaseAccessibility;
        TypeName = newTypeName;
        Name = newName;
        SetterAccessibility = newSetterAccessibility;
        SetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue = newSetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue;
    }
}
#>
