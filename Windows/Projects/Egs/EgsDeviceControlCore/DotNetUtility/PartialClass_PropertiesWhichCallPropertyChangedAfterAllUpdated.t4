<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
namespace <#= namespaceName #>
{
    using System;
    using System.Runtime.Serialization;
    using System.ComponentModel;
    using Egs;
    using Egs.DotNetUtility;
    using Egs.PropertyTypes;

    <#= classDescription #>
    {
<#
foreach (var item in propertyElementsList)
{
#>
        [EditorBrowsable(EditorBrowsableState.Never)]
        <#= item.TypeName #> _<#= item.Name #>;
        [EditorBrowsable(EditorBrowsableState.Never)]
        bool hasToCallPropertyChangedOf<#= item.Name #>;
<# if (string.IsNullOrEmpty(item.AttributeDescription) == false) { #>
        <#= item.AttributeDescription #>
<# } #>
        <# if (string.IsNullOrEmpty(item.BaseAccessibility) == false) { #><#= item.BaseAccessibility #> <# } #><#= item.TypeName #> <#= item.Name #>
        {
            get { return _<#= item.Name #>; }
            <# if (string.IsNullOrEmpty(item.SetterAccessibility) == false) { #><#= item.SetterAccessibility #> <# } #>set { if (value != _<#= item.Name #>) { _<#= item.Name #> = value; hasToCallPropertyChangedOf<#= item.Name #> = true; } }
        }

<#
}
#>

        internal void CallPropertyChangedOfOnlyUpdatedPropertiesAtOnce()
        {
<#
foreach (var item in propertyElementsList)
{
#>
            if (hasToCallPropertyChangedOf<#= item.Name #>) { OnPropertyChanged("<#= item.Name #>"); }
<#
}
#>
        }

        internal void CallPropertyChangedOfAllPropertiesAtOnce()
        {
<#
foreach (var item in propertyElementsList)
{
#>
            OnPropertyChanged("<#= item.Name #>");
<#
}
#>
            SetFalseToAllHasToCallPeropertyChangedFields();
        }

        internal void SetFalseToAllHasToCallPeropertyChangedFields()
        {
<#
foreach (var item in propertyElementsList)
{
#>
            hasToCallPropertyChangedOf<#= item.Name #> = false;
<#
}
#>
        }
    }
}
<#+
private class OnePropertyInfoInPropertiesWhichCallPropertyChangedAfterAllUpdated
{
    public string AttributeDescription;
    public string BaseAccessibility;
    public string TypeName;
    public string Name;
    public string SetterAccessibility;
    public bool SetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue;
    public OnePropertyInfoInPropertiesWhichCallPropertyChangedAfterAllUpdated(string newAttributeDescription, string newBaseAccessibility, string newTypeName, string newName, string newSetterAccessibility, bool newSetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue)
    {
        AttributeDescription = newAttributeDescription;
        BaseAccessibility = newBaseAccessibility;
        TypeName = newTypeName;
        Name = newName;
        SetterAccessibility = newSetterAccessibility;
        SetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue = newSetValueOnlyWhenTheNewValueIsDifferentFromCurrentValue;
    }
}
#>
